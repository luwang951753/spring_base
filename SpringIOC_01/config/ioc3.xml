<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
    <!-- 原来是按照配置的顺序创建bean的 -->
    <!-- 改变bean的创建顺序 -->
    <!-- 实验8：bean之间的依赖 （只是改变创建顺序） -->
    <bean class="com.atguigu.bean.Car" id="car" depends-on="book,person"></bean>
    <bean class="com.atguigu.bean.Person" id="person"/>
    <bean class="com.atguigu.bean.Book" id="book"/>

    <!--  实验9：测试bean的作用域，分别创建单实例和多实例的bean★
    bean的作用域：指bean是否单实例，xxx; 默认单实例的
    prototype: 多实例的
        1). 容器启动，默认不会去创建多实例bean
        2). 获取的时候创建这个bean
    singleton: 单实例的,默认的
        1). 单实例的bean,在容器创建完成之前就已经创建好对象，并保存在容器中
        2). 任何获取都是获取之前创建好的那个对象
    request: 在web环境下，同一次请求创建一个Bean实例(没用)
    session: 在web环境下，同一次会话创建一个Bean实例（没用）
    -->
    <bean id="person2" class="com.atguigu.bean.Person" scope="prototype"/>

    <!--  实验5：配置通过静态工厂方法创建的bean、实例工厂方法创建的bean、FactoryBean★  -->
    <!--  bean的创建默认就是框架利用反射new出来的bean实例  -->
    <!--  工厂模式：工厂帮我们创建对象；有一个专门帮我们创建对象的类，这个类就是工厂
            AirPlane ap = AirPlaneFactory.getAirPlane(String jzName);
            静态工厂：工厂本身不用创建对象；通过静态方法调用，工厂类.工厂方法名()
            实例工厂：工厂本身需要创建对象；工厂类 工厂对象 = new 工厂类();
                     工厂对象.getAirPlane("张三");
     -->

    <!--  1. 静态工厂不需要创建工厂本身  factory-method="getAirPlane"指定哪个方法是工厂方法
            class: 指定静态工厂全类名
            factory-method: 指定工厂方法
            constructor-arg: 可以为方法传参
    -->
    <bean id="airPlane01" class="com.atguigu.factory.AirPlaneStaticFactory" factory-method="getAirPlane">
        <constructor-arg value="王麻子"/>
    </bean>

    <!--  2. 实例工厂使用
          factory-method: 指定实例工厂中，哪个方法是工厂方法
    -->
    <bean id="airPlaneInstanceFactory" class="com.atguigu.factory.AirPlaneInstanceFactory"/>

    <!--  factory-bean：指定当前对象创建使用哪一个工厂 '
            1. 先配置出实例工厂对象；
            2. 配置我们要创建的AirPlane使用哪个工厂创建
                1). factory-bean: 指定使用哪个工厂实例
                2). factory-method: 指定使用哪个工厂方法
     -->
    <bean id="airPlane02" class="com.atguigu.bean.AirPlane" factory-bean="airPlaneInstanceFactory" factory-method="getAirPlane">
        <constructor-arg value="机长啊，快活啊..."></constructor-arg>
    </bean>

    <!-- FactoryBean(是Spring规定的一个接口),只要是这个接口的实现类，Spring都认为是一个工厂；
            1. ioc容器启动时，不会创建实例
            2. FactoryBean获取的时候才创建对象
    -->
    <bean id="myFactoryBean" class="com.atguigu.factory.MyFactoryBeanImple"/>
</beans>