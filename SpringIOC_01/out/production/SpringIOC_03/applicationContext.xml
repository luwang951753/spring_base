<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

    <context:property-placeholder location="classpath:dbconfig.properties"/>
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"/>
        <property name="driverClass" value="${jdbc.driverClass}"/>
    </bean>

<!-- 实验15：通过注解分别创建Dao、Service、Controller(控制器，控制网站跳转逻辑Servlet)★-->
<!--
    通过给bean上添加某些注解，可以快速的降bean加入到ioc容器中
    某个类上添加任何一个注解，都能快速的将bean添加到ioc容器中管理
    Spring有四个注解：
    @Controller：控制器：推荐给控制器层（servlet 包下）的组件加这个注解
    @Service: 业务逻辑：我们推荐业务逻辑层的组件添加这个注解：BookService
    @Repository: 给数据库层（持久化层，dao层）的组件添加这个注解
    @Component: 给不属于以上几层的组件添加这个注解

    注解可以随便加：Spring不会去验证这个组件，是否如你的注解所说就是一个dao层的或者就是一个servlet层的组件。
    我们推荐各层加各自注解，给我们程序员看的。

    使用注解将组件快速加入到容器中需要几步：
    1). 给要添加的组件上标四个注解中的任何一个
    2). 告诉spring自动扫描增加了注解的组件，依赖context名称空间
    3). 一定要导入aop包，支持加注解模式的；
-->

    <!--
        context:component-scan：自动组件扫描
        base-package: 指定扫描的基础包：把基础包以及他下面所有包的所有加了注解的类，自动的扫描进ioc容器
    -->
    <!--<context:component-scan base-package="com.atguigu"/>-->

    <!-- 实验17：使用context:exclude-filter指定扫描包时不包含的类 -->
    <!--<context:component-scan base-package="com.atguigu">-->
    <!--  扫描的时候，可以排除一些不要的组件
          【type="annotation"】 指定排除规则，按照注解进行排除。标注了指定注解的组件不要
            expression="" 注解的全类名
          【type="assignable"】指定排除某个具体的类,按照类排除
            expression="" 类的全类名
          type="aspectj" ：后来aspectj表达式
          type="custom"：自定义一个TypeFilter的实现类，自己写代码决定哪些使用
          type="regex"：还可以写正则表达式
    -->
    <!--    <context:exclude-filter type="regex" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="assignable" expression="com.atguigu.service.BookService"/>
    </context:component-scan>-->
    
    <!--
        实验16：使用context:include-filter指定扫描包时要包含的类
        只扫描进入哪些组件，默认是全部扫描进来
        一定要禁用掉默认的过滤规则才行：use-default-filters="false"
    -->
    <!--<context:component-scan base-package="com.atguigu" use-default-filters="false">-->
        <!-- 指定只扫描哪些组件 -->
<!--        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
    </context:component-scan>-->

    <!-- DI(依赖注入) -->
    <!-- 实验18：使用@Autowired注解实现根据类型实现自动装配★ -->
    <context:component-scan base-package="com.atguigu"/>
    <!-- @Autowired 原理
            @Autowired
            private BookService bookService;
            1). 先按照类型去容器中找到对应的组件；bookService = ioc.getBean(BookService.class);
                1). 找到一个:找到就赋值
                2). 没找到：抛异常
                3). 找到多个？装配上？
                    1). 按照变量名作为id继续匹配 BookService(bookService), BookServiceExt(bookService)
                        1). 匹配上：装配
                        2). 没匹配上？报错
                            原因：因为我们按照变量名作为id继续匹配
                            【使用@Qualifier("bookServiceExt")指定一个新id】
                                1). 找到：装配
                                2). 找不到：报错
            发现Autowired标注的自动装配的属性默认是一定装配上的：
            找到就装配，找不到就拉倒：@Autowired(required = false)

    -->


    <!--
        实验19：如果资源类型的bean不止一个，
                默认根据@Autowired注解标记的成员变量名作为id查找bean，进行装配★

        实验20：如果根据成员变量名作为id还是找不到bean，
                可以使用@Qualifier注解明确指定目标bean的id★

        实验22：@Autowired注解的required属性指定某个属性允许不被设置



        实验21：在方法的形参位置使用@Qualifier注解
    -->

<!--
    @Autowired 最强大，Spring自己的注解
    @Resource j2ee，java的标准，扩展性更强，如果切换成另外一个容器框架，@Resource还是可以被认识，但是@Autowired就不行
    @Inject
    以上都是自动装配的意思
 -->

</beans>